AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Exported by architect/package@6.0.4 on 2021-03-24T15:45:02.118Z
Resources:
  HTTP:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      DefinitionBody:
        openapi: 3.0.1
        info:
          title:
            Ref: AWS::StackName
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndexHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /timetest:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTimetestHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /hkprisma:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetHkprismaHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /hksql:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetHksqlHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /_static/{proxy+}:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '1.0'
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub:
                  - http://${bukkit}.s3.${AWS::Region}.amazonaws.com/{proxy}
                  - bukkit:
                      Ref: StaticBucket
                connectionType: INTERNET
                timeoutInMillis: 30000
  GetIndexHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://arc-db-pool-cfn-deployments-f1298/3e7414908e5f4726d7ff8ece4250b9a1
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: arc-db-pool
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_ENV: staging
          ARC_HTTP: aws_proxy
          ARC_ROLE:
            Ref: Role
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          CONNECTION_STRING: DATABASE_URL=postgres://ltketduwdexbkm:a5c3964344d03d2f98694c57c65a645b34b244d914cb4682f9f63c69ffea576f@ec2-54-159-175-113.compute-1.amazonaws.com:5432/d5mdam18oljg7
          PG_DATABASE: d5mdam18oljg7a
          PG_HOST: ec2-54-159-175-113.compute-1.amazonaws.com
          PG_PASSWORD: a5c3964344d03d2f98694c57c65a645b34b244d914cb4682f9f63c69ffea576f
          PG_USERNAME: ltketduwdexbkm
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetIndexHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId:
              Ref: HTTP
  GetTimetestHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://arc-db-pool-cfn-deployments-f1298/a78ceded36cff4f50e1787296a5d21e0
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: arc-db-pool
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_ENV: staging
          ARC_HTTP: aws_proxy
          ARC_ROLE:
            Ref: Role
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          CONNECTION_STRING: DATABASE_URL=postgres://ltketduwdexbkm:a5c3964344d03d2f98694c57c65a645b34b244d914cb4682f9f63c69ffea576f@ec2-54-159-175-113.compute-1.amazonaws.com:5432/d5mdam18oljg7
          PG_DATABASE: d5mdam18oljg7a
          PG_HOST: ec2-54-159-175-113.compute-1.amazonaws.com
          PG_PASSWORD: a5c3964344d03d2f98694c57c65a645b34b244d914cb4682f9f63c69ffea576f
          PG_USERNAME: ltketduwdexbkm
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetTimetestHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /timetest
            Method: GET
            ApiId:
              Ref: HTTP
  GetHkprismaHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://arc-db-pool-cfn-deployments-f1298/8c5ca0c09c44133d9e09dab1e7860c1c
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: arc-db-pool
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_ENV: staging
          ARC_HTTP: aws_proxy
          ARC_ROLE:
            Ref: Role
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          CONNECTION_STRING: DATABASE_URL=postgres://ltketduwdexbkm:a5c3964344d03d2f98694c57c65a645b34b244d914cb4682f9f63c69ffea576f@ec2-54-159-175-113.compute-1.amazonaws.com:5432/d5mdam18oljg7
          PG_DATABASE: d5mdam18oljg7a
          PG_HOST: ec2-54-159-175-113.compute-1.amazonaws.com
          PG_PASSWORD: a5c3964344d03d2f98694c57c65a645b34b244d914cb4682f9f63c69ffea576f
          PG_USERNAME: ltketduwdexbkm
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetHkprismaHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /hkprisma
            Method: GET
            ApiId:
              Ref: HTTP
  GetHksqlHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://arc-db-pool-cfn-deployments-f1298/cae9daa6c431ca8da68175594e5dc4be
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: arc-db-pool
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_ENV: staging
          ARC_HTTP: aws_proxy
          ARC_ROLE:
            Ref: Role
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          CONNECTION_STRING: DATABASE_URL=postgres://ltketduwdexbkm:a5c3964344d03d2f98694c57c65a645b34b244d914cb4682f9f63c69ffea576f@ec2-54-159-175-113.compute-1.amazonaws.com:5432/d5mdam18oljg7
          PG_DATABASE: d5mdam18oljg7a
          PG_HOST: ec2-54-159-175-113.compute-1.amazonaws.com
          PG_PASSWORD: a5c3964344d03d2f98694c57c65a645b34b244d914cb4682f9f63c69ffea576f
          PG_USERNAME: ltketduwdexbkm
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetHksqlHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /hksql
            Method: GET
            ApiId:
              Ref: HTTP
  DbpoolTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - AttributeName: pk
        KeyType: HASH
      - AttributeName: sk
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: pk
        AttributeType: S
      - AttributeName: sk
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
  StaticBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ArcGlobalPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: arn:aws:logs:*:*:*
      - PolicyName: ArcStaticBucketPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:DeleteObject
            Resource:
            - Fn::Sub:
              - arn:aws:s3:::${bukkit}
              - bukkit:
                  Ref: StaticBucket
            - Fn::Sub:
              - arn:aws:s3:::${bukkit}/*
              - bukkit:
                  Ref: StaticBucket
      - PolicyName: ArcDynamoPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
            Resource:
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}
              - tablename:
                  Ref: DbpoolTable
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*
              - tablename:
                  Ref: DbpoolTable
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/stream/*
              - tablename:
                  Ref: DbpoolTable
  DbpoolParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/tables/${tablename}
        - tablename: dbpool
      Value:
        Ref: DbpoolTable
  StaticBucketParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/static/${key}
        - key: bucket
      Value:
        Ref: StaticBucket
  StaticFingerprintParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/static/${key}
        - key: fingerprint
      Value: 'false'
  ParameterStorePolicy:
    Type: AWS::IAM::Policy
    DependsOn: Role
    Properties:
      PolicyName: ArcParameterStorePolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: ssm:GetParametersByPath
          Resource:
            Fn::Sub:
            - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}
            - {}
      Roles:
      - Ref: Role
Outputs:
  API:
    Description: API Gateway (HTTP)
    Value:
      Fn::Sub:
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com
      - ApiId:
          Ref: HTTP
  ApiId:
    Description: API ID (ApiId)
    Value:
      Ref: HTTP
  BucketURL:
    Description: Bucket URL
    Value:
      Fn::Sub:
      - http://${bukkit}.s3-website-${AWS::Region}.amazonaws.com
      - bukkit:
          Ref: StaticBucket
